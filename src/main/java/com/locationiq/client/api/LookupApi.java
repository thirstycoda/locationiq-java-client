/*
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.locationiq.client.api;

import com.google.gson.reflect.TypeToken;
import com.locationiq.client.model.LookupLocation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import LocationIq.ApiCallback;
import LocationIq.ApiClient;
import LocationIq.ApiException;
import LocationIq.ApiResponse;
import LocationIq.Configuration;
import LocationIq.Pair;

public class LookupApi {
    private ApiClient localVarApiClient;

    public LookupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for lookup
     *
     * @param osmIds           This must contain a list of OSM ids each prefixed with its type, one of node(N), way(W) or relation(R). Up to 3 ids can be queried at the same time.
     * @param addressDetails   Include a breakdown of the address of this result into elements. Important components include (but not limited to) country, postcode, state, county, city, town. Only those elements that are available for a given location will be returned.
     * @param extraTags        Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to 0.
     * @param nameDetails      Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to 0.
     * @param normalizeAddress Makes parsing of the address object easier by returning a predictable and defined list of elements. Defaults to 0 for backward compatibility. We recommend setting this to 1 for new projects.
     * @param normalizeCity    For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. (required)
     * @param postalAddress    Returns address inside the postaladdress key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to 0.
     * @param stateCode        Adds state or province code when available to the state_code key inside the address object. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0.
     * @param polygonGeojson   Output geometry of results in geojson format. Defaults to 0.
     * @param polygonKml       Output geometry of results in kml format. Defaults to 0.
     * @param polygonSvg       Output geometry of results in svg format. Defaults to 0.
     * @param polygonText      Output geometry of results as a WKT. Defaults to 0.
     * @param polygonThreshold When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter describes the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the geometry.
     * @param format           Output Format. Only json supported as of now.
     * @param acceptLanguage   Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @param _callback        Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> The request has been made from an unauthorized domain. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No location or places were found for the given input </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Request exceeded the rate-limits set on your account </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call lookupCall(List<String> osmIds,
                                         boolean addressDetails,
                                         boolean extraTags,
                                         boolean nameDetails,
                                         boolean normalizeAddress,
                                         boolean normalizeCity,
                                         boolean postalAddress,
                                         boolean stateCode,
                                         boolean polygonGeojson,
                                         boolean polygonKml,
                                         boolean polygonSvg,
                                         boolean polygonText,
                                         Double polygonThreshold,
                                         String format,
                                         String acceptLanguage,
                                         final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookup.php";

        List<Pair> localVarQueryParams = new ArrayList<>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<>();
        if (osmIds != null || !osmIds.isEmpty()) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("osm_ids", String.join(",", osmIds)));
        }

        if (addressDetails) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressdetails", 1));
        }

        if (extraTags) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extratags", 1));
        }

        if (nameDetails) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namedetails", 1));
        }

        if (normalizeAddress) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalizeaddress", 1));
        }

        if (normalizeCity) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalizecity", 1));
        }

        if (postalAddress) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaladdress", 1));
        }

        if (stateCode) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state_code ", 1));
        }

        if (polygonGeojson) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("polygon_geojson", 1));
        }

        if (polygonKml) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("polygon_kml", 1));
        }

        if (polygonSvg) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("polygon_svg", 1));
        }

        if (polygonText) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("polygon_text", 1));
        }

        if (polygonThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("polygon_threshold", polygonThreshold));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (acceptLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accept-language", acceptLanguage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();
        Map<String, String> localVarCookieParams = new HashMap<>();
        Map<String, Object> localVarFormParams = new HashMap<>();
        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"key"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupValidateBeforeCall(List<String> osmIds,
                                                  boolean addressDetails,
                                                  boolean extraTags,
                                                  boolean nameDetails,
                                                  boolean normalizeAddress,
                                                  boolean normalizeCity,
                                                  boolean postalAddress,
                                                  boolean stateCode,
                                                  boolean polygonGeojson,
                                                  boolean polygonKml,
                                                  boolean polygonSvg,
                                                  boolean polygonText,
                                                  Double polygonThreshold,
                                                  String format,
                                                  String acceptLanguage,
                                                  final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'q' is set
        if (osmIds == null || osmIds.isEmpty()) {
            throw new ApiException("Missing the required parameter 'osm_ids' when calling lookup(Async)");
        }

        return lookupCall(osmIds, addressDetails, extraTags, nameDetails, normalizeAddress, normalizeCity, postalAddress, stateCode, polygonGeojson, polygonKml, polygonSvg, polygonText, polygonThreshold, format, acceptLanguage, _callback);

    }

    /**
     * The Lookup API is a variant of the Search API that returns place predictions in response to an HTTP request.  The request specifies a textual search string and optional geographic bounds.  The service can be used to provide lookup functionality for text-based geographic searches, by returning places such as businesses, addresses and points of interest as a user types. The Lookup API can match on full words as well as substrings. Applications can therefore send queries as the user types, to provide on-the-fly place predictions.
     *
     * @param osmIds           This must contain a list of OSM ids each prefixed with its type, one of node(N), way(W) or relation(R). Up to 3 ids can be queried at the same time.
     * @param addressDetails   Include a breakdown of the address of this result into elements. Important components include (but not limited to) country, postcode, state, county, city, town. Only those elements that are available for a given location will be returned.
     * @param extraTags        Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to 0.
     * @param nameDetails      Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to 0.
     * @param normalizeAddress Makes parsing of the address object easier by returning a predictable and defined list of elements. Defaults to 0 for backward compatibility. We recommend setting this to 1 for new projects.
     * @param normalizeCity    For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. (required)
     * @param postalAddress    Returns address inside the postaladdress key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to 0.
     * @param stateCode        Adds state or province code when available to the state_code key inside the address object. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0.
     * @param polygonGeojson   Output geometry of results in geojson format. Defaults to 0.
     * @param polygonKml       Output geometry of results in kml format. Defaults to 0.
     * @param polygonSvg       Output geometry of results in svg format. Defaults to 0.
     * @param polygonText      Output geometry of results as a WKT. Defaults to 0.
     * @param polygonThreshold When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter describes the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the geometry.
     * @param format           Output Format. Only json supported as of now.
     * @param acceptLanguage   Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @return List&lt;LookupLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> The request has been made from an unauthorized domain. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No location or places were found for the given input </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Request exceeded the rate-limits set on your account </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     * </table>
     */
    public List<LookupLocation> lookup(List<String> osmIds,
                                       boolean addressDetails,
                                       boolean extraTags,
                                       boolean nameDetails,
                                       boolean normalizeAddress,
                                       boolean normalizeCity,
                                       boolean postalAddress,
                                       boolean stateCode,
                                       boolean polygonGeojson,
                                       boolean polygonKml,
                                       boolean polygonSvg,
                                       boolean polygonText,
                                       Double polygonThreshold,
                                       String format,
                                       String acceptLanguage) throws ApiException {
        ApiResponse<List<LookupLocation>> localVarResp = lookupWithHttpInfo(
                osmIds,
                addressDetails,
                extraTags,
                nameDetails,
                normalizeAddress,
                normalizeCity,
                postalAddress,
                stateCode,
                polygonGeojson,
                polygonKml,
                polygonSvg,
                polygonText,
                polygonThreshold,
                format,
                acceptLanguage);

        return localVarResp.getData();
    }

    /**
     * The Lookup API is a variant of the Search API that returns place predictions in response to an HTTP request.  The request specifies a textual search string and optional geographic bounds.  The service can be used to provide lookup functionality for text-based geographic searches, by returning places such as businesses, addresses and points of interest as a user types. The Lookup API can match on full words as well as substrings. Applications can therefore send queries as the user types, to provide on-the-fly place predictions.
     *
     * @param osmIds           This must contain a list of OSM ids each prefixed with its type, one of node(N), way(W) or relation(R). Up to 3 ids can be queried at the same time.
     * @param addressDetails   Include a breakdown of the address of this result into elements. Important components include (but not limited to) country, postcode, state, county, city, town. Only those elements that are available for a given location will be returned.
     * @param extraTags        Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to 0.
     * @param nameDetails      Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to 0.
     * @param normalizeAddress Makes parsing of the address object easier by returning a predictable and defined list of elements. Defaults to 0 for backward compatibility. We recommend setting this to 1 for new projects.
     * @param normalizeCity    For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. (required)
     * @param postalAddress    Returns address inside the postaladdress key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to 0.
     * @param stateCode        Adds state or province code when available to the state_code key inside the address object. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0.
     * @param polygonGeojson   Output geometry of results in geojson format. Defaults to 0.
     * @param polygonKml       Output geometry of results in kml format. Defaults to 0.
     * @param polygonSvg       Output geometry of results in svg format. Defaults to 0.
     * @param polygonText      Output geometry of results as a WKT. Defaults to 0.
     * @param polygonThreshold When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter describes the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the geometry.
     * @param format           Output Format. Only json supported as of now.
     * @param acceptLanguage   Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @return ApiResponse&lt;List&lt;LookupLocation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> The request has been made from an unauthorized domain. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No location or places were found for the given input </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Request exceeded the rate-limits set on your account </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<LookupLocation>> lookupWithHttpInfo(List<String> osmIds,
                                                                      boolean addressDetails,
                                                                      boolean extraTags,
                                                                      boolean nameDetails,
                                                                      boolean normalizeAddress,
                                                                      boolean normalizeCity,
                                                                      boolean postalAddress,
                                                                      boolean stateCode,
                                                                      boolean polygonGeojson,
                                                                      boolean polygonKml,
                                                                      boolean polygonSvg,
                                                                      boolean polygonText,
                                                                      Double polygonThreshold,
                                                                      String format,
                                                                      String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = lookupValidateBeforeCall(
                osmIds,
                addressDetails, 
                extraTags, 
                nameDetails, 
                normalizeAddress, 
                normalizeCity,
                postalAddress, 
                stateCode,
                polygonGeojson,
                polygonKml,
                polygonSvg, 
                polygonText,
                polygonThreshold,
                format, 
                acceptLanguage, 
                null);
        
        Type localVarReturnType = new TypeToken<List<LookupLocation>>() {}.getType();
        
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     * The lookup API allows querying the address and other details of one or multiple OSM objects, such as nodes, ways, or relations.
     *
     * @param osmIds           This must contain a list of OSM ids each prefixed with its type, one of node(N), way(W) or relation(R). Up to 3 ids can be queried at the same time.
     * @param addressDetails   Include a breakdown of the address of this result into elements. Important components include (but not limited to) country, postcode, state, county, city, town. Only those elements that are available for a given location will be returned.
     * @param extraTags        Include additional information in the result if available, e.g. wikipedia link, opening hours. Defaults to 0.
     * @param nameDetails      Include a list of alternative names in the results. These may include language variants, references, operator and brand. Defaults to 0.
     * @param normalizeAddress Makes parsing of the address object easier by returning a predictable and defined list of elements. Defaults to 0 for backward compatibility. We recommend setting this to 1 for new projects.
     * @param normalizeCity    For responses with no city value in the address section, the next available element in this order - city_district, locality, town, borough, municipality, village, hamlet, quarter, neighbourhood - from the address section will be normalized to city. Defaults to 1 for SDKs. (required)
     * @param postalAddress    Returns address inside the postaladdress key, that is specifically formatted for each country. Currently supported for addresses in Belgium, Brazil, France, Germany, Greece, India, Ireland, Italy, Portugal, South Africa, Spain and United Kingdom. Defaults to 0.
     * @param stateCode        Adds state or province code when available to the state_code key inside the address object. Currently supported for addresses in the USA, Canada and Australia. Defaults to 0.
     * @param polygonGeojson   Output geometry of results in geojson format. Defaults to 0.
     * @param polygonKml       Output geometry of results in kml format. Defaults to 0.
     * @param polygonSvg       Output geometry of results in svg format. Defaults to 0.
     * @param polygonText      Output geometry of results as a WKT. Defaults to 0.
     * @param polygonThreshold When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter describes the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the geometry.
     * @param format           Output Format. Only json supported as of now.
     * @param acceptLanguage   Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
     * @param _callback        Callback for upload/download progress
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> The request has been made from an unauthorized domain. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No location or places were found for the given input </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Request exceeded the rate-limits set on your account </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call lookupAsync(List<String> osmIds,
                                    boolean addressDetails,
                                    boolean extraTags,
                                    boolean nameDetails,
                                    boolean normalizeAddress,
                                    boolean normalizeCity,
                                    boolean postalAddress,
                                    boolean stateCode,
                                    boolean polygonGeojson,
                                    boolean polygonKml,
                                    boolean polygonSvg,
                                    boolean polygonText,
                                    Double polygonThreshold,
                                    String format,
                                    String acceptLanguage,
                                    final ApiCallback<List<LookupLocation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupValidateBeforeCall(
                osmIds,
                addressDetails,
                extraTags,
                nameDetails,
                normalizeAddress,
                normalizeCity,
                postalAddress,
                stateCode,
                polygonGeojson,
                polygonKml,
                polygonSvg,
                polygonText,
                polygonThreshold,
                format,
                acceptLanguage,
                _callback);

        Type localVarReturnType = new TypeToken<List<LookupLocation>>() {}.getType();

        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);

        return localVarCall;
    }
}
